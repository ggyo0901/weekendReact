

라이브러리 정의
 
    react-reouter-dom
    styled-components styled-reset
    react-redux redux @redux-toolkit/js
    axios

    -D 
    redux-logger


-------------------------------------------------------------

    스토리보드

        퍼블리싱 ->퍼블리싱
        백엔드 ->DB설계,서버
        프론트엔드 ->{
            1.컴포넌트 구조
                [공용컴포넌트 설게]
            2.외부 오픈소스 라이브러리
            3.testcode작성 [TDD]
            4.각 페이지에 필요한 api들을 머릿속으로 설계
                    [input 값을 계산]
                    [state가 언제 어떤 state가 바뀌어야 랜더링을 최적화]
                    [input값을 통해서 어떻게 하면 내가 원하는 output을 얻을수있는가]
                    [공용커스텀 훅, 공용 유틸 함수]
                    [재사용]
            5. 컴포넌트화,-> state화,-> 랜더링()
            6. mocking data, mocking api를 통해서 데이터 통신까지 구현
        }

-------------------------------------------------------------

todolist에 필요한 api

    homepage
        login api (post) -> id,pw
        sign api    (post) ->id,pw,(email,name,addr...)

    todolist Page
        todolist api   (get) -> x
                             -> 특정 todo를보고싶다면 ->todo.id
                             ->페이지별로 todo를 보고싶다면 (페이지네이션)->page.number
        addtodo api (post) -> todo  -> status(200) ,응답(내가 추가했던 todo) -> (1) setState[...state,res.todo]
                          (2) draft.state.unshift(action.payload)
                          (3) draft.state.push(action.payload)
                *백엔드는 
                insert into -->데이터를 테이블에저장
                select *from -> 잘저장됬어 확인
                select의 결과값을 프론트에 전달
                (예외,회원가입이 되었을 때 결과값 전달하면 ? [x] ->성공 메시지만 보냄)

        updatetodo api(put) -> id, flag,todo ->응담(내가수정한 todo)
                (1) todo.id find-> todo= res.todo
        deletetodo api(delete) -> id -> 응답(id)
                        (1) todo.id filter
                    
-------------------------------------------------------------
    
    웹스토리지

        서버가 아닌 클라이언트(사용자)가 데이터를 저장할 수있도록 지원하는 기능
        1. 로컬 스토리지
            브라우저가 종료되어도 혹은 새탭이나 새창을 띄워도 데이터를 공유합니다
            즉 데이터가 지워지지 않습니다
            직접 인터넷 사용기록지우기(쿠키를 포함한...) 데이터는 영구적 보존 
            단, 같은 컴퓨터에서, 같은 브라우저를 사용하면 

        2. 세션 스토리지
            웹페이지의 세션(브라우저)이 종료되면 ,브라우저가 종료되면 데이터가 지워진다.
            각각의 탭과 창마다 데이터가 격리되어 있음

-------------------------------------------------------------

    1. axios.post("full backend url").then().catch()

    2. axiosApiInstance("/todo").then().catch()

    3. AutoApi.login().then.catch
    
    4. try(
        const res=await AutoApi.login({email,password})
        ...
    )
            catch(
                console.err(err)
            )

    5.
    throw Errow()--> 내가 원하는 형태의 에러를 상위 처리자에게 던짐
     많은 에러정보중에 내가 필요한 에러만 커스텀함
     상위 처리자는 에러를 핸들링 해야합니다 .(ex. try의 catch문)
    최상위 한테 throw Error()===console.err(err) =>의미가 없다
    에러 핸들링