Redux?
 전역 상태 관리
  왜 할까?
    로직 ,저장소, props 깊어지면 어떻게 될까 -> 디버깅(오류추적) 쉽지않음

    action ---? dispatcher로 store에 전달되는값
    dispatcher---? action을 store에 전달 매개체
    store--? 전역상태,상태 변경 로직 저장소

    미들웨어 ? [중간통로,중간에서 데이터 조직(아이템)]

        [디버깅을 위한]
        logger
        devtools-extention

        [비동기 로직을 동기적으로 처리하기 위한]
        saga
            (reducer에 전달되는 request ation type을 saga에서 이벤트 리스너로 가로채서 비동기 요청후 비동기 성공 여부에 따라 다시 reducer에 disptcher로 전달)
        thunk
            (promise 형태로 감싼다,비동기 요청시 자동으로 pending,fullfield,rejected 상태 진행)

------------------------------------------------------


    axios, fetch

        axios란?
        브라우저, node.js를 위한 Promise API(HTTP를 활용한 비동기 통신 라이브러리)
        비슷한 라이브러리에는 ajax가 있음 (ajax는 구버전이기 떄문에 현재 사용하지 않습니다)
        *API
            두 애플리케이션(서버) 특정 프로토콜(Http와 같은)을 사용하여 서로 통신 (데이터를 주고받게)할 수 있게하는 것
        
            promise 형태를 return(then,catch 사용이 가능)

        => HTTP를 통해 서버끼리 요청메시지와 응답 메세지를 전달해주는 역할

        axios vs fetch

        fetch
            자바스크립트의 빌트인 객체(기본 지원)
            문자열을 반환하기 떄문에 json형태로 파싱해주어야만 (바꾸어주어야만 )사용 가능
            axios에 비해 많은 기능을 지원 x, 브라우저에 상위 버전에서만 호환
            간단한 요청은 fetch로 진행하는 경우가 많음

        axios   
            라이브러리 ,별도의 설치필요
            다양한 보안 관련 옵션추가, status에 따라 다양한 상태 값지정
            JSON형태로 반환히기 떄문에 따라 파싱할 필요없음 요청을 중간에 취소할 수 있고 요청을 중간에 가로챌 수 있음(중간에 값을 가로채서 특정값 추가(조작)) 거의 모든 브라우저 버전 지원

        사용법
            npm i axios
            yarn add axios

            axios({
                url:요청을 보낼 주소(ex 백엔드 주소,클라우드주소)
                method: 통신방식 (ex GET,POST,DELETE,PUT,PATCH,HEADER...),
                data:{
                    body로 보낼데이터
                },
                params:{쿼리스트링으로 보낼데이터}
            }).then((res)=> {
                ..성공시 실행 할 문장
            }).catch(err)=>{
                ..실패시 실행 할 문장
            }

    
------------------------------------------------------

    axios 단축 메소드
        
        method  
            개발자들 사이에 REST API를 위한 약속
            *REST API
                api에 이름을 주어서 유지 보수 쉽게하는 것

            백엔드에서 해당요청이 어떤 method인지 정해주니 맞춰서 요청하면 됨
            (api 문서, swagger=>어떤 api들이 있고 어떤 주소에 보내야하고, 결과값으로 뭐가 나오는지)

        *get--> 얻다. 가져오다 (조회 -READ)
        *post--> 물품을 보내는 것을 지칭(생성 -CREATE) ex. 회원 가입, 물품등록, 게시글등록
        *put --> 놓다 (수정 - UPDATE) *모든데이터를 수정 [기존에 있던 데이터 대신해서 놓다]
        *patch ---> 작은 조각들 (수정 -UPDATE *일부 데이터를수정
        *delete ---> 삭제(삭제 -DELETE) ex. 회원탈퇴, 게시글 삭제, 물품 삭제

        ==> 모든 요청이나 데이터는 CRUD로 이루어져 있다 해도 과연이 아님 
        CREATE,READ,UPDATE,DELETE

        단축 메소드
        *config설정 (객체)

            aixos.get(url,config)---->
            axios.get("/prod",{params:{prodIdx:1,status:1}})
               *params(쿼리스트링이랑 같은말)
            axios.get(`/prod?prodIdx=${prodIdx}&status=${status}`)
            *백엔드 주소?
                (?,=,&)
                /prod?prodIdx=1&status=1

                param
                    `/prod/${prodIdx}`

            aixos.post(url,data,config)---->
            aixos.post("/prod",{prodName:"떡볶이",price:3000},config)

            ex)상품 번호가 318번인 상품의 리뷰를 생성한다

            https/백엔드주소/prod/318/review
            https/백엔드주소/review?prodIdx=318
            

            aixos.put(url,config)
            aixos.delete(url,config)

                *전체삭제
                    postIdx=3,5,7
                    axios 요청을 세번 보내야할까?
                    {
                        postIdx=3,
                        postIdx=5,
                    }(x)

                    병렬화 
                       " https/백엔드주소/prod/delete?postIdx=3&postIdx=5&postIdx=7"
                    
                    (1)
                        const arr=[3,5,7]
                        for(let i=0;i<arr.length;i++)}{
                            url+=`postIdx(arr[i])&`
                        }
                        url 조합해서 쿼리스트링으로 직접보낸다

                    (2)<참고>

                        axios의 병렬화 옵션을 사용
                        postIdx=[3,5,7,]

                        axios.delete("/prod,{params:{postIdx:[3,5,7 ]}})

                        paramsSeializer:function(params){
                            return.qs.stringfy(params,{arrayFormat:'request'})
                        }


------------------------------------------------------

    http status code
        HTTP통신 규약 상태 코드
        요청을 받았음, 근데 이요청은 항상 성공할까?x
        경우에 따라 실패,실패의 원인 항상 같을까?x

        따라서,실패원인 혹은 성공원인에 따라 다른 응답 메시지에 다른 스테이터스 코드를 보냄으로서 나는 이러한 상태를 가지고 있다라고 알려주는것
        => 백엔드가 결과 여부를 코드화 시켜 프론트에 보내주는것

        100번대: 요청을 받았음 프로세스 진행
        *200번대: 성공, 요청을 성공적으로 받았음
        300번대: 리다리렉션, 요청 완료를 위해 추가 작업이 필요
        *400번대: 실패, 요청이 잘못되었거나 요청을 처리 할 수없다.(클라이언트 오류)
        *500번대:실패, 서버가 요청에 대한 충족을 실패(서버오류)

        *경우에 따라 개발과정에서 백엔드 로직이 잘못되어 400번대가 뜨는 경우가 있음

        ex) api 문서가 잘못되었거나 로직이 잘못되어 해당주소가 없는 경우

        https://www.whatap.io/ko/blog/40/

------------------------------------------------------

    custom hook

        본래 초기 버전의 프론트엔드 컴포넌트 구조는
        뷰(화면,html코드) 서비스(기능)을 완전히 분리

        그러나 훅함수의 등장으로 한가지 이상의 훅함수를 활용하여 만든 서비스를 커스텀화 시킴으로서 직접 뷰에 기능을 기재하여도 유지 보수에 용이

        대표적인 커스텀훅 ex) useInput

------------------------------------------------------

  

    dbms(DataBase Management System)
        - 데이터베이스(데이터 군락,집단 )관리 시스템 도구
        - maria db,mysql,oracle ...

        Data?
            의미가 있는(쓰임새가 있는) 모든 정보와 자료

        Data =>돈이 되는 시대

        즉 이러한 막대한 양의 데이터를 효율적으로 과닐하기 위해 DBMS를 활용

    DMBS 종류

        - 계층형
        - 네트워크형
        - *관계형
        - *key-value
        - *NSQL


    RDBMS
    
    1) 관계형 데이터 모델에 기초
    2) 모든데이터를 2차원 테이블 형태로표현
    3) 테이블이 서로 연관되어있기 때문에 다른 DBMS보다 효율적으로 데이터 구성
    4) 데이터 관리를 위해 SQL이라는 쿼리(언어)를 사용

        종류: oracle,mysql,mariaDB,MSsql,PostgreSQL
        
------------------------------------------------------  
  

    * MySQL 데이터타입(자료형), 제약조건(스키마)

      * 데이터타입
        1. 숫자타입
            - 정수형 int, bigint (smallinmt, mediumint)
            - 소수형 float, double

        2. 문자타입
            - char, varchar, text

        3. 날짜와 시간
            - date, datetime, timestamp

        4. enum
            - enum('f','w') ==> 괄호 안에 있는 데이터만 허용


      * 제약조건
        1. NOT NULL : null을 저장할 수 없음 (required)
        2. UNIQUE : 중복된 값을 저장할 수 없음
        3. DEFALUT : 기본 값 (값이 들어가지 않았을 때 기본 값)
        4. PRMIARY KEY, FOREIGN KEY
                    PRMIARY KEY: 대표키, 기본키 (not null, unique)
                        =======> 다른 데이터와 구분이 되는 키
                    
                    FOREIGN KEY: 다른 테이블 관계를 짓는 키 =======> 회원탈퇴 ---> 구매내역? (경우에,이 데이터가 돈이 되는 경우) ====> 연관된 데이터의 삭제 방지
        5. AUTO_INCREMENT
            데이터를 넣지않아도 자동으로 수가 증가되어 추가 중복값이 저장되지 않음
            단, 직접데이터 추가불가능
            대표적으로 상품번호, 고유번호등, idx값으로 사용
        

        회원데이터 저장소 (테이블)
        회원테이블
        -----------=----
        아이디
        비번
        이메일
        이름
        전화번호
        개인정보 동의
        -----------------

        개념모델링 -> 놀리모델링(테이블 관계,명확하게 추상화)-> 물리모델링(DBMS에서 관리할 수 있도록 형체화)





------------------------------------------------------

    * DBMS의 언어 SQL 쿼리문

        CRUD
        [Create Read Update Delete]
           생성  조회  갱신   삭제

        create database 데이터베이스명;
        use 데이터베이스명;

        테이블 생성(데이터가 저장될 공간)

            create table 테이블명 (
                필드명 (컬럼명) 데이터타입 제약조건
            );

            ;으로 닫아주어야 함

        Create --> insert into 테이블명(컬럼명1,컬럼명2...) values( 삽입데이터1,상입데이터2..)
        Read   --> select* from 테이블명 (* ==하위의 모든 요소)
                   select 컬럼명1,컬럼명2 from 테이블명 (원하는 컬럼명만)
                   select *from 테이블명 where useridx=1(조건식 특정한 값을 가진 데이터만)

                   
        Update --> update 테이블명 set 컬럼명=데이터 where 조건식
        Delete --> delete from 테이블명 where 조건식

        *트렌지션, PL/SQL,프로시저,join,서브쿼리, 빌트윈 함수,연산자, 정렬,그룹화,모델링,반정규화, 정규화

------------------------------------------------------
                         
    privateroute
                         
------------------------------------------------------                          
    웹스토리지

------------------------------------------------------