리덕스의 미들웨어

미들웨어 (중간 통로)
리덕스는 동기적 흐름으로 동작

액션생성 => 디스패치 => store에전달 => reducer는 정해진 로직에 의해 액션처리

하지만, 리덕스에서는 동기적인 흐름만으로는 처리하기 힘든 작업들이 존재
대표적으로 시간을 딜레이, 외부에서 데이터를 요청하여 응답을 보여주는 경우


=> redux는 동기적인 흐름 따라서 비동기 처리하기 힘듬
도와주는게 미들웨어 대표적으로 saga,thunk

------------------------------------------------------------------------------

saga , thunk

* Thunk 
    : 리덕스 미들웨어에서 비동기 작업을 동기적으로 처리하기 위한 대표적 라이브러리
    딜레이 함수 직접 구현해야하고 thunk라는 것이 감사는 형태

    ex) const 비동기함수();
    const thunk =()=>{비동기함수()}===> promise형태로 리턴

    단점은 로직자체가 바깥에서 들어나 지저분해 질 수 였다
    RTK를 통해 수정및 보완이 가능해지면서 현재 굉장히 인기

* Saga 
    : Saga 또한 리덕스의 미들웨어, 제너레이터 함수를 사용 딜레이 구현 가능
    로직 분리 가능 

=> RTK(Reducx Tool Kit=리덕스를 편하겠는 라이브러리) 를 통해 리덕스의 최대 단전인 길어지는 코드량을 보완하고자 하였음
    결론적으로 보일러 코드량을 줄이는데는 성공 했으나 여전희 불편함이 있기 떄문에

    recoil,mbox의 인기
- --------------------------------------------------------------------------------

npm i redux react-redux redux-saga
npm i -D redux-logger redux-devtools-extension

앞에 -D를 붙이는 경우
배포를 할 떄 npm build를 사욜하영 node_noudles의 무게를 줄이게됨
이때 -D로 설치한 라이브러리들은 설치x

- --------------------------------------------------------------------------------

    env

        환경 변수 설정(환경에 따라 달라지는 변수)
        보통은 감추고 싶은 값이 있을 때 사용
        (ex. 백엔드의 주소,토큰 "키" 값, DB계정, 암호)

        원래는 npm i dot-env로 설치해야하나
        react(CRA)에서는 자체 지원 + 자동 설정

        *자동 설정 되어있는 것

        process.env.NODE_ENV
        (npm start 환경에서는 "development")
        (npm run build 환경에서는 "prodution")

        *자동 설정 외의 설정
        
        1. development,product의 공용값
        root디렉토리 (package.json과 같은 경로)에
        .env 파일을 생성
        단) react에서는 env가 자체 적용 되어있기 때문에 앞에 반드시 키 값으로 
        REACT_APP을 붙여주어야한다

        ex) REACT_APP_API_URL:https://92.192.:5000

        2. 개발 환경에 따라 다른 값

            .env.prodution //배포환경
            .env.development //개발 환경
            .env.test //test code

            파일 생성후 똑같이 REACT_APP 앞에 붙인 후 환경 변수 생성

        3. 우선순위

        env보다는 .env.prodution이 높다
        그리고 일반 env 보다는 .local이 붙은게 더높다

        ex) .env<.env.prodution < .env.local < .env.prodution.local

------------------------------------------------------------------------

    redux saga 함수, 제너레이터

    제너레이터 함수
            * yield
                제너레이터 함수로  saga에서 동기적 흐름을 위하여 현재의 흐름을
                멈출수 있는 명령어
            
            * takeLatest
                가장 보편적으로 하는 redux saga 함수중 take 관련함수
                중복 요청 들어올 시 진행 중이던 작업취소, 가장 마지막 실행된 작업만 실행
            
                ex) takeEvery 모든걸다실행

            * throttle
                해당 지연 시간 내에 동일한 이벤트 발생시 발생x

            * delay
                지연 처리 효과 (1000ms=1초 ) 줄 수 있으며
                보통은 비동기 통신을 휸내내거나, 시간 딜레이를사용

            * put
                특정 액션을 dispatcher
                다시 reducer로 action을 보내는 역할
                (* 백엔드와 데이터 통신이 성공했을 떄 혹은 실패했을떄 다시 상태 업데이트를 위함)

            * call
                매개변수를 전달 받은 함수를 실행
                첫번쨰 파라미터에는 실행할 함수, 두번째 파라미터에는 함수의 매개변수\
                ex) call(login,action.payload)

            * fork
                함수의 비동기적인 호출을 할 때 사용
                이벤트 리스너

            * all
                보통 fork와 사용, fork를 병렬적으로 (여러개를 한번에) 실행 하기 위함

------------------------------------------------------------------------
리덕스 미들웨어를 사용하는이유

백엔드에 데이터(회원정보,상품정보,게시물정보) 요청 
---요청을 완료하기전에---- state업데이트? _---- 데이터가없으니까 처리x

백엔드에 데이터요청(dispatcher type: REQUEST)
-------------------->결과에 따라 (dispatcher type: SCUESS/FAILURE)
--------------------> 실패했으면 에러를 상태 업데이트  / 성공했으면 데이터 존재하니까 상태 업데이트

------------------------------------------------------------------------

트래픽 ---> 네트워크(인터넷속도) 속도 100gbps // 무언가를 다운받는데 1gbps /100명(내가 가지고 있는 회선이 처리할 수 있는 양)